                                                             ----------Java Notes----------


Object Oriented Programming : It is an approach that provides a way of modularizing programming, that which can be used to create small partition memory area for both data and objects, which are to be used as templates for creating copies of such modules on demand. 

Object :

An object is a real world entity, that which possess 3 characterstics known as
	
	(i) State

	(ii) Behaviour

	(iii) Identity 

OOPS Features : 
________________

1) Encapsulation : Wrapping up of data and functions into a single unit known as encapsulation. 

2) Abstraction : Hiding the irrelevant details of an object, that do not contribute to its essential characterstics known as Abstraction. 

  *** Encapsulation focuses on showing the relevant details where, abstraction focuses on hiding the irrelevant details. ***

3) Inheritance : Deriving a new entity from already existing entity known as inheritance, through inheritance we can reduce the size of the program.

4) Polymorphism : The ability to take more than one form known as polymorphism. 

class : A class is a template or blueprint, that which contains combination of data members and member functions.  Members of the class can be accessable by using instance of the class. 

class class_name
{
   data members;
   member functions;
}

Why Java : 
__________

1) Platform Independence : Write Once and Run anywhere. 

2) Console/Windows/Web/Serivce Oriented/Mobile Apps : 

3) Packages 

__________________________________________________

Java Features : 
__________________


(i) Simple : Java uses simple C/C++ syntaxes, as programmer no need to take care of internal details like memory management etc...As how much memory allocated to run the program, the same amount of memory will be reallocated automatically. 

(ii) Object Oriented : Java supports all object oriented programming features. 

(iii) Compiled and Interpreted : Java programs are compiled first, during compilation java code will be converted into bytecode, then .class file will be created. In interpretation it reads the bytecode line by line and executes. 

(iv) Portable : Ability to run the program without changing the source code, java programs are programs that can run on any env. without changing the source code. 

(v) Securable : Java implements various levels of security as

	(i) Compiler Level

	(ii) Bytecode Level

	(iii) Class Loader Level

(vi) Distributed 

 By using java, we can make all distributed and robust applications. 

Java Architecture : 
___________________


	(i) Java Program : Java code that which stored with extension .java

	(ii) Java Class : Java code after compilation its converted into bytecode

	(iii) JVM (Java Virtual Machine) 

		(a) Class Loader : Used to load all classes which are required to 		run the program. There are 2 types of class loaders known as

			(i) Primordial Class Loader

			(ii) Class Loader Objects 


		(b) JIT Compiler : Converts bytecode into CPU specific format. 

		(c) Execution Manager : Contains QUEUE of programs which are ready to run where we can execute the program. 

	*** Before execution, needs to undergone security authentication ***

	(iv) Java API : It provides runtime env, that which allows you to run the java program. As there are 2 components as

		(a) JDK  (b) JRE


The default package in java is lang, as we can define as java.lang

The top level class in java is Object, as we can define as java.lang.Object

Data Types : 

There are various types of data types as

(i) Value Types : int, float, double, byte, char, boolean 

(ii) Reference Types : String, Object and Custom Objects

*** value types will be stored in STACK memory and reference types will be stored in HEAP memory ***

System.out.println() 

System ->  class

out ->  Console

println()  ->  method. 

System.out.println("Welcome to Java Programming...");

You can define method main() as 

public static void main(String[] args) {

}



main() method must be static as no class object supposed to call method main()


Access Modifiers : 
_____________________

1) private  : Allows you to access members within current class. 

2) public : Allows you to access members in entire application. 

3) protected : Allows you to access members within current/derived class. 

4) friendly : By default java possess friendly access modifier, allows you to access members within all classes of current package. 

You can create an object to the class, as

class_name obj = new class_name();

Control Structures : 
____________________

Used to define the flow of the program. 

There are 2 types of control structures known as 

(i) Branching

if...else : Executes the statement(s) based on the condition. 

if (condition) {
	statement(s);
} else {
	statement(s);
}

switch...case : Used to define menu-driven programs. 



(ii) Looping 

while loop : This loop executes all the statement(s) repeatedly until the condition remains true, if the condition remains false, then it comes out of the loop. 

For every loop, we have 3 phases as 

	(i) Initilization

	(ii) Condition

	(iii) Increment/Decrement 

Initilization performed at the beginning of the loop.

Condition performed at the conditional part of the loop.

Increment/Decrement performed before closing the loop. 

while(condition) {
   statement(s);
}

for loop : This loop executes all the statements repeatdly until the condition remains true.

for(initialization;condition;increment/decrement) {
...
...
...
}

Arrays : An array is the finite ordered set of homogeneous elements, means all the elements belongs to same data type. 

All the elements of array are stored in successive memory locations. 

int[] a = new int[]{12,5,33,23,66};

a[0]=12;
a[1]=5;
a[2]=33;
a[3]=23;
a[4]=66;

How internally foreach loop will work ???
int[] a = new int[] {12,4,33,653,23};
//		for(int i=0;i<a.length;i++) {
//			System.out.println(a[i]);
//		}
		for (int i : a) {
			System.out.println(i);
		}

In this above loop, at first i points to the first element in array A, after processing first element, it checks next element is there or not by using hasMoreElements(), it hasMoreElements() returns true, it moves to the next element by using nextElement(). It repeats as soon as hasMoreElements() is true. 

public class Quiz1 {
   public static void main(String[] args) {
	System.out.println("5"+3+8);
	System.out.println("5"+(3+8));
	System.out.println("5+3"+8);
  }
}

public class Quiz2 {
   public static void main(String[] args) {
	int x;
	System.out.println(x);
   }
}

public class Quiz3 {
   public static void main(String[] args) {
	int x=10;
	int y=x++;
	System.out.println(x + " " +y);
   }
}

public class Quiz4 {
   public static void main(String[] args) {
	int x=10;
	int y=x++ + x++ + ++x + ++x;
            // 10 + 11 + 13 + 14
	System.out.println(x + " " +y);
   }
}

public class Quiz5 {
   boolean climate;
   public static void main(String[] args) {
	System.out.println(new Quiz5().climate);
   }
}


public class Quiz6 {
   public static void main(String[] args) {
	int ch='A';
	System.out.println(ch);
   }
}

public class Quiz7 {
   public static void main(String[] args) {
	System.out.println(args[0] + " " + args[2]);
   }
}

java Quiz7 Ayush Rahul Khafia Jitendra

public class Quiz8 {
    public static void main(String[] args) {
	byte b=125;
	b+=10;	
	System.out.println(b);
   }
}

public class Quiz9 {
    public static void main(String[] args) {
	String s1="Hello";
	s1.concat(" World");
	System.out.println(s1);
   }
}


Task 1: 

Write a Program to implement current bill as read no.of units and generate bill based on slabs given below

	first 90 units 1 rs per unit
	91 to 150 units 1.5 rs per unit
	151 to 200 units 2 rs per unit
	200 to 240 units 2.5 rs per unit
	240+ units 3 rs per unit 

Case 1 : If units are 95 then bill is (90 * 1 ) + (5 * 1.5)
Case 2 : If units are 155 then bill is (90 * 1) + (60 * 1.5) + (5 * 2) 
Case 3 : If units are 205 then bili is (90 * 1) + (60 * 1.5) + (50 * 2) + (5 *2.5)


Day - 2

Boxing and Unboxing : 

The concept of converting value types to reference type known as boxing, and refernce type to value type known as unboxing. 

Object is the type, that which can be used for boxing and unboxing. 

int x;

x="Hello";
x=12;
x=12.5;

Object x;

x="Hello";
x=12;
x=12.5

enum : used to store group of constarnt values, which can be used as user-defined data type. 

Method overloading : The concept of using the same method name w.r.t. different data types or different parameters known as method overloading.  Here, the method name must be same. 

class Test {
   int x, y;
   x=12;
   y=13;
}

Constructors : A constructor is a special member which used to initilize the member variables of the class, it is special because it has the same name as that of class name. 

Rules : 
_________

	(i) It will not contains any return type

	(ii) It will not return any value

	(iii) Constructors can be overloaded. 

Types of Constructors : 
________________________

There are 2 types of constructors 

	-> static constructors : These are called class constructors, which are used to initilize the static variables of the class, these constuctors are invoked automatically before control reaches the entry point. These constructors cannot be overloaded. (*** In java, we don't have static constructors, as static {} acts as static constructor ***) 

	-> Instance constructors : These are the constructors that which are invoked automatically once the instance of the class created. These constructors can be overloaded. 

static variables : These are the class variables, that which retains values irrespective of type of object. 

Inheritance : The concept of deriving a new class from already existing class known as inheritance, the class which derived known as derived class, the class from which its derived known as base class. Through inheritance, we can reduce the size of the program. 

class First {
...
...
...
}

class Second extends First {
...
...
...
}

Once you create an object to Second class, then you can access all public/protected and friendly members of base class. 

super keyword : If you want to pass values from derived class to base class, then we need the help of super keyword. It has 2 forms as

1) super as a keyword

2) super as a constructor

Abstract Class : 
________________

A class, that which can be created, but not implemented and instantiated known as abstract class. Abstract class contains abstract and non-abstract methods, abstract methods needs to be overrided mandetorily by the derived class. 

abstract class class_name {
    abstract method1();
    abstract method2();
}

interfaces : 
_____________

Java does not support the concept of multiple inheritance, to achieve this we need the help of interfaces. 

An interface contains method declaration, and the implementation can be done in the corresponding class, you can add more than one interface to the particular class. 

Difference between interface and Abstract Class : 
__________________________________________________

   -> An abstract class contains both abstract and non-abstract
		methods, where interface contains only
		abstract methods. 

   -> Interface methods are public and abstract by default.

   -> Multiple Inheritance can be achieved by using interfaces

   -> An interface can be called from anywhere to anywhere. 

interface interface_name {
   method1();
   method2();
}

interface can be added to the class by using implements keyword. 

interface IOne {
  void show();
}

interface ITwo {
  void show();
}

interface IThree {
  void show();
}

class Hello implements IOne, ITwo, IThree {

}

final class : 

Final class cannot be inherited

Final methods cannot be overrided

Final variables cannot be updated. 


1) Write a Program to implement multiplication of 2 numbers (100 digit number 100 digit number) print exact result.

2) Write a program to display a number in english words

Case 1:

123 One hundred twenty Three

1234 One thousand two Hundred thirty Four

400 Four Hundred

790 Seven Hundred Ninety
























